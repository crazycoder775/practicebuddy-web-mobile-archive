"use strict";
var type_1 = require('../../core/utils/type');
var category_common_1 = require('../common/category.common');
exports.ActionTypes = {
    INIT: type_1.type(category_common_1.CATEGORY + " Init"),
    INITIALIZED: type_1.type(category_common_1.CATEGORY + " Initialized"),
    INIT_FAILED: type_1.type(category_common_1.CATEGORY + " Init Failed"),
    ADD: type_1.type(category_common_1.CATEGORY + " Add"),
    NAME_ADDED: type_1.type(category_common_1.CATEGORY + " Name Added")
};
var InitAction = (function () {
    function InitAction() {
        this.type = exports.ActionTypes.INIT;
        this.payload = null;
    }
    return InitAction;
}());
exports.InitAction = InitAction;
var InitializedAction = (function () {
    function InitializedAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.INITIALIZED;
    }
    return InitializedAction;
}());
exports.InitializedAction = InitializedAction;
var InitFailedAction = (function () {
    function InitFailedAction() {
        this.type = exports.ActionTypes.INIT_FAILED;
        this.payload = null;
    }
    return InitFailedAction;
}());
exports.InitFailedAction = InitFailedAction;
var AddAction = (function () {
    function AddAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.ADD;
    }
    return AddAction;
}());
exports.AddAction = AddAction;
var NameAddedAction = (function () {
    function NameAddedAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.NAME_ADDED;
    }
    return NameAddedAction;
}());
exports.NameAddedAction = NameAddedAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9mcmFtZXdvcmtzL3NhbXBsZS9hY3Rpb25zL25hbWUtbGlzdC5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQix1QkFBdUIsQ0FBQyxDQUFBO0FBQzdDLGdDQUF5QiwyQkFBMkIsQ0FBQyxDQUFBO0FBa0J4QyxtQkFBVyxHQUFxQjtJQUMzQyxJQUFJLEVBQVMsV0FBSSxDQUFJLDBCQUFRLFVBQU8sQ0FBQztJQUNyQyxXQUFXLEVBQUUsV0FBSSxDQUFJLDBCQUFRLGlCQUFjLENBQUM7SUFDNUMsV0FBVyxFQUFFLFdBQUksQ0FBSSwwQkFBUSxpQkFBYyxDQUFDO0lBQzVDLEdBQUcsRUFBVSxXQUFJLENBQUksMEJBQVEsU0FBTSxDQUFDO0lBQ3BDLFVBQVUsRUFBRyxXQUFJLENBQUksMEJBQVEsZ0JBQWEsQ0FBQztDQUM1QyxDQUFDO0FBU0Y7SUFBQTtRQUNFLFNBQUksR0FBRyxtQkFBVyxDQUFDLElBQUksQ0FBQztRQUN4QixZQUFPLEdBQVcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFBRCxpQkFBQztBQUFELENBSEEsQUFHQyxJQUFBO0FBSFksa0JBQVUsYUFHdEIsQ0FBQTtBQUVEO0lBR0UsMkJBQW1CLE9BQXNCO1FBQXRCLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFGekMsU0FBSSxHQUFHLG1CQUFXLENBQUMsV0FBVyxDQUFDO0lBRWMsQ0FBQztJQUNoRCx3QkFBQztBQUFELENBSkEsQUFJQyxJQUFBO0FBSlkseUJBQWlCLG9CQUk3QixDQUFBO0FBRUQ7SUFBQTtRQUNFLFNBQUksR0FBRyxtQkFBVyxDQUFDLFdBQVcsQ0FBQztRQUMvQixZQUFPLEdBQVcsSUFBSSxDQUFDO0lBQ3pCLENBQUM7SUFBRCx1QkFBQztBQUFELENBSEEsQUFHQyxJQUFBO0FBSFksd0JBQWdCLG1CQUc1QixDQUFBO0FBRUQ7SUFHRSxtQkFBbUIsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFGbEMsU0FBSSxHQUFHLG1CQUFXLENBQUMsR0FBRyxDQUFDO0lBRWUsQ0FBQztJQUN6QyxnQkFBQztBQUFELENBSkEsQUFJQyxJQUFBO0FBSlksaUJBQVMsWUFJckIsQ0FBQTtBQUVEO0lBR0UseUJBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRmxDLFNBQUksR0FBRyxtQkFBVyxDQUFDLFVBQVUsQ0FBQztJQUVRLENBQUM7SUFDekMsc0JBQUM7QUFBRCxDQUpBLEFBSUMsSUFBQTtBQUpZLHVCQUFlLGtCQUkzQixDQUFBIiwiZmlsZSI6ImFwcC9mcmFtZXdvcmtzL3NhbXBsZS9hY3Rpb25zL25hbWUtbGlzdC5hY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyB0eXBlIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscy90eXBlJztcbmltcG9ydCB7IENBVEVHT1JZIH0gZnJvbSAnLi4vY29tbW9uL2NhdGVnb3J5LmNvbW1vbic7XG5cbi8qKlxuICogRm9yIGVhY2ggYWN0aW9uIHR5cGUgaW4gYW4gYWN0aW9uIGdyb3VwLCBtYWtlIGEgc2ltcGxlXG4gKiBlbnVtIG9iamVjdCBmb3IgYWxsIG9mIHRoaXMgZ3JvdXAncyBhY3Rpb24gdHlwZXMuXG4gKlxuICogVGhlICd0eXBlJyB1dGlsaXR5IGZ1bmN0aW9uIGNvZXJjZXMgc3RyaW5ncyBpbnRvIHN0cmluZ1xuICogbGl0ZXJhbCB0eXBlcyBhbmQgcnVucyBhIHNpbXBsZSBjaGVjayB0byBndWFyYW50ZWUgYWxsXG4gKiBhY3Rpb24gdHlwZXMgaW4gdGhlIGFwcGxpY2F0aW9uIGFyZSB1bmlxdWUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU5hbWVMaXN0QWN0aW9ucyB7XG4gIElOSVQ6IHN0cmluZztcbiAgSU5JVElBTElaRUQ6IHN0cmluZztcbiAgSU5JVF9GQUlMRUQ6IHN0cmluZztcbiAgQUREOiBzdHJpbmc7XG4gIE5BTUVfQURERUQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEFjdGlvblR5cGVzOiBJTmFtZUxpc3RBY3Rpb25zID0ge1xuICBJTklUOiAgICAgICAgdHlwZShgJHtDQVRFR09SWX0gSW5pdGApLFxuICBJTklUSUFMSVpFRDogdHlwZShgJHtDQVRFR09SWX0gSW5pdGlhbGl6ZWRgKSxcbiAgSU5JVF9GQUlMRUQ6IHR5cGUoYCR7Q0FURUdPUll9IEluaXQgRmFpbGVkYCksXG4gIEFERDogICAgICAgICB0eXBlKGAke0NBVEVHT1JZfSBBZGRgKSxcbiAgTkFNRV9BRERFRDogIHR5cGUoYCR7Q0FURUdPUll9IE5hbWUgQWRkZWRgKVxufTtcblxuLyoqXG4gKiBFdmVyeSBhY3Rpb24gaXMgY29tcHJpc2VkIG9mIGF0IGxlYXN0IGEgdHlwZSBhbmQgYW4gb3B0aW9uYWxcbiAqIHBheWxvYWQuIEV4cHJlc3NpbmcgYWN0aW9ucyBhcyBjbGFzc2VzIGVuYWJsZXMgcG93ZXJmdWxcbiAqIHR5cGUgY2hlY2tpbmcgaW4gcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogU2VlIERpc2NyaW1pbmF0ZWQgVW5pb25zOiBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9hZHZhbmNlZC10eXBlcy5odG1sI2Rpc2NyaW1pbmF0ZWQtdW5pb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBJbml0QWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgdHlwZSA9IEFjdGlvblR5cGVzLklOSVQ7XG4gIHBheWxvYWQ6IHN0cmluZyA9IG51bGw7XG59XG5cbmV4cG9ydCBjbGFzcyBJbml0aWFsaXplZEFjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHR5cGUgPSBBY3Rpb25UeXBlcy5JTklUSUFMSVpFRDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQXJyYXk8c3RyaW5nPikgeyB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbml0RmFpbGVkQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgdHlwZSA9IEFjdGlvblR5cGVzLklOSVRfRkFJTEVEO1xuICBwYXlsb2FkOiBzdHJpbmcgPSBudWxsO1xufVxuXG5leHBvcnQgY2xhc3MgQWRkQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgdHlwZSA9IEFjdGlvblR5cGVzLkFERDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7IH1cbn1cblxuZXhwb3J0IGNsYXNzIE5hbWVBZGRlZEFjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHR5cGUgPSBBY3Rpb25UeXBlcy5OQU1FX0FEREVEO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHsgfVxufVxuXG4vKipcbiAqIEV4cG9ydCBhIHR5cGUgYWxpYXMgb2YgYWxsIGFjdGlvbnMgaW4gdGhpcyBhY3Rpb24gZ3JvdXBcbiAqIHNvIHRoYXQgcmVkdWNlcnMgY2FuIGVhc2lseSBjb21wb3NlIGFjdGlvbiB0eXBlc1xuICovXG5leHBvcnQgdHlwZSBBY3Rpb25zXG4gID0gSW5pdEFjdGlvblxuICB8IEluaXRpYWxpemVkQWN0aW9uXG4gIHwgSW5pdEZhaWxlZEFjdGlvblxuICB8IEFkZEFjdGlvblxuICB8IE5hbWVBZGRlZEFjdGlvbjtcbiJdfQ==
