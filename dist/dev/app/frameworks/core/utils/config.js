"use strict";
var Config = (function () {
    function Config() {
    }
    Config.isLoggedIn = function () {
        return !!Config.token;
    };
    Config.getToken = function () {
        return Config.token;
    };
    Config.hasActiveToken = function () {
        return !!Config.token;
    };
    Config.invalidateToken = function () {
        Config.token = "";
        Config.email = "";
    };
    Config.IS_WEB = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.WEB;
    };
    Config.IS_MOBILE_NATIVE = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_NATIVE;
    };
    Config.IS_MOBILE_HYBRID = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_HYBRID;
    };
    Config.IS_DESKTOP = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.DESKTOP;
    };
    Config.ENVIRONMENT = function () {
        if (Config.IS_MOBILE_NATIVE()) {
            return {
                API: 'your api endpoint',
                ENV: 'nativescript'
            };
        }
        else {
            return JSON.parse('{"API":"https://demo.com","ENV":"DEV"}');
        }
    };
    Config.IS_DEBUG_MODE = function () {
        for (var key in Config.DEBUG) {
            if (Config.DEBUG[key]) {
                return true;
            }
        }
        return false;
    };
    Config.RESET = function () {
        for (var key in Config.DEBUG) {
            Config.DEBUG[key] = false;
        }
    };
    Config.DEBUG = {
        LEVEL_1: false,
        LEVEL_2: false,
        LEVEL_3: false,
        LEVEL_4: false
    };
    Config.PLATFORMS = {
        WEB: 'web',
        MOBILE_NATIVE: 'mobile_native',
        MOBILE_HYBRID: 'mobile_hybrid',
        DESKTOP: 'desktop'
    };
    Config.PLATFORM_TARGET = Config.PLATFORMS.WEB;
    return Config;
}());
exports.Config = Config;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9mcmFtZXdvcmtzL2NvcmUvdXRpbHMvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFjQTtJQUFBO0lBc0ZBLENBQUM7SUFqRmlCLGlCQUFVLEdBQXhCO1FBQ0EsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFYSxlQUFRLEdBQXRCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVhLHFCQUFjLEdBQTVCO1FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFYSxzQkFBZSxHQUE3QjtRQUNFLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUF1QmEsYUFBTSxHQUFwQjtRQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ3pELENBQUM7SUFFYSx1QkFBZ0IsR0FBOUI7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztJQUNuRSxDQUFDO0lBRWEsdUJBQWdCLEdBQTlCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDbkUsQ0FBQztJQUVhLGlCQUFVLEdBQXhCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDN0QsQ0FBQztJQUVhLGtCQUFXLEdBQXpCO1FBQ0UsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQztnQkFDTCxHQUFHLEVBQUUsbUJBQW1CO2dCQUN4QixHQUFHLEVBQUUsY0FBYzthQUNwQixDQUFDO1FBQ0osQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6QyxDQUFDO0lBQ0gsQ0FBQztJQUVhLG9CQUFhLEdBQTNCO1FBQ0UsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXRCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDZCxDQUFDO1FBQ0gsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0lBR2EsWUFBSyxHQUFuQjtRQUNFLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBN0RhLFlBQUssR0FBUTtRQUN6QixPQUFPLEVBQUUsS0FBSztRQUNkLE9BQU8sRUFBRSxLQUFLO1FBQ2QsT0FBTyxFQUFFLEtBQUs7UUFDZCxPQUFPLEVBQUUsS0FBSztLQUNmLENBQUM7SUFHWSxnQkFBUyxHQUFlO1FBQ3BDLEdBQUcsRUFBRSxLQUFLO1FBQ1YsYUFBYSxFQUFFLGVBQWU7UUFDOUIsYUFBYSxFQUFFLGVBQWU7UUFDOUIsT0FBTyxFQUFFLFNBQVM7S0FDbkIsQ0FBQztJQUdZLHNCQUFlLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7SUE4Qy9ELGFBQUM7QUFBRCxDQXRGQSxBQXNGQyxJQUFBO0FBdEZZLGNBQU0sU0FzRmxCLENBQUEiLCJmaWxlIjoiYXBwL2ZyYW1ld29ya3MvY29yZS91dGlscy9jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGZWVsIGZyZWUgdG8gZXh0ZW5kIHRoaXMgaW50ZXJmYWNlXG4vLyBkZXBlbmRpbmcgb24geW91ciBhcHAgc3BlY2lmaWMgY29uZmlnLlxuZXhwb3J0IGludGVyZmFjZSBFbnZDb25maWcge1xuICBBUEk/OiBzdHJpbmc7XG4gIEVOVj86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIElQbGF0Zm9ybXMge1xuICBXRUI6IHN0cmluZztcbiAgTU9CSUxFX05BVElWRTogc3RyaW5nO1xuICBNT0JJTEVfSFlCUklEOiBzdHJpbmc7XG4gIERFU0tUT1A6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIENvbmZpZyB7XG4gICAgXG4gcHVibGljIHN0YXRpYyB0b2tlbjpzdHJpbmc7XG4gcHVibGljIHN0YXRpYyBlbWFpbDpzdHJpbmc7XG4gICAgXG4gICAgcHVibGljIHN0YXRpYyBpc0xvZ2dlZEluKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIUNvbmZpZy50b2tlbjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VG9rZW4oKTphbnkge1xuICAgIHJldHVybiBDb25maWcudG9rZW47XG4gIH1cbiAgICBcbiAgcHVibGljIHN0YXRpYyBoYXNBY3RpdmVUb2tlbigpOmFueSB7XG4gICAgcmV0dXJuICEhQ29uZmlnLnRva2VuO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpbnZhbGlkYXRlVG9rZW4oKSB7XG4gICAgQ29uZmlnLnRva2VuID0gXCJcIjtcbiAgICBDb25maWcuZW1haWwgPSBcIlwiO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBQYWdlQ2xhc3M6IGFueTtcblxuICBwdWJsaWMgc3RhdGljIERFQlVHOiBhbnkgPSB7XG4gICAgTEVWRUxfMTogZmFsc2UsIC8vIC5pbmZvIG9ubHlcbiAgICBMRVZFTF8yOiBmYWxzZSwgLy8gLndhcm4gb25seVxuICAgIExFVkVMXzM6IGZhbHNlLCAvLyAuZXJyb3Igb25seVxuICAgIExFVkVMXzQ6IGZhbHNlICAvLyAubG9nICsgYWxsIHRoZSBhYm92ZVxuICB9O1xuXG4gIC8vIHN1cHBvcnRlZCBwbGF0Zm9ybXNcbiAgcHVibGljIHN0YXRpYyBQTEFURk9STVM6IElQbGF0Zm9ybXMgPSB7XG4gICAgV0VCOiAnd2ViJyxcbiAgICBNT0JJTEVfTkFUSVZFOiAnbW9iaWxlX25hdGl2ZScsXG4gICAgTU9CSUxFX0hZQlJJRDogJ21vYmlsZV9oeWJyaWQnLFxuICAgIERFU0tUT1A6ICdkZXNrdG9wJ1xuICB9O1xuXG4gIC8vIGN1cnJlbnQgdGFyZ2V0IChkZWZhdWx0cyB0byB3ZWIpXG4gIHB1YmxpYyBzdGF0aWMgUExBVEZPUk1fVEFSR0VUOiBzdHJpbmcgPSBDb25maWcuUExBVEZPUk1TLldFQjtcblxuICAvLyBjb252ZW5pZW50IHBsYXRmb3JtIGNoZWNrc1xuICBwdWJsaWMgc3RhdGljIElTX1dFQigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQ29uZmlnLlBMQVRGT1JNX1RBUkdFVCA9PT0gQ29uZmlnLlBMQVRGT1JNUy5XRUI7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIElTX01PQklMRV9OQVRJVkUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuTU9CSUxFX05BVElWRTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgSVNfTU9CSUxFX0hZQlJJRCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQ29uZmlnLlBMQVRGT1JNX1RBUkdFVCA9PT0gQ29uZmlnLlBMQVRGT1JNUy5NT0JJTEVfSFlCUklEO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBJU19ERVNLVE9QKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBDb25maWcuUExBVEZPUk1fVEFSR0VUID09PSBDb25maWcuUExBVEZPUk1TLkRFU0tUT1A7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEVOVklST05NRU5UKCk6IEVudkNvbmZpZyB7XG4gICAgaWYgKENvbmZpZy5JU19NT0JJTEVfTkFUSVZFKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIEFQSTogJ3lvdXIgYXBpIGVuZHBvaW50JyxcbiAgICAgICAgRU5WOiAnbmF0aXZlc2NyaXB0J1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoJzwlPSBFTlZfQ09ORklHICU+Jyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBJU19ERUJVR19NT0RFKCk6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGtleSBpbiBDb25maWcuREVCVUcpIHtcbiAgICAgIGlmIChDb25maWcuREVCVUdba2V5XSkge1xuICAgICAgICAvLyBpZiBhbnkgbGV2ZWwgaXMgb24sIGRlYnVnIG1vZGUgaXMgb25cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIHJlc2V0IGRlYnVnIGRlZmF1bHRzXG4gIHB1YmxpYyBzdGF0aWMgUkVTRVQoKSB7XG4gICAgZm9yIChsZXQga2V5IGluIENvbmZpZy5ERUJVRykge1xuICAgICAgQ29uZmlnLkRFQlVHW2tleV0gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
