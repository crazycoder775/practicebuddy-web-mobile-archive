"use strict";
var testing_1 = require("@angular/core/testing");
var testing_2 = require("@angular/router/testing");
var store_1 = require("@ngrx/store");
var effects_1 = require("@ngrx/effects");
var index_1 = require("../../test/index");
var core_module_1 = require("../../core/core.module");
var index_2 = require("../../core/index");
var index_3 = require("../../core/testing/index");
var index_4 = require("../testing/index");
var index_5 = require("../index");
var testModuleConfig = function (options) {
    testing_1.TestBed.configureTestingModule({
        imports: [
            core_module_1.CoreModule.forRoot([
                { provide: index_2.WindowService, useValue: window },
                { provide: index_2.ConsoleService, useValue: console }
            ]),
            store_1.StoreModule.provideStore({ i18n: index_5.reducer }),
            effects_1.EffectsModule.run(index_5.MultilingualEffects),
            testing_2.RouterTestingModule
        ],
        providers: [
            index_3.TEST_CORE_PROVIDERS(options),
            index_4.TEST_MULTILINGUAL_PROVIDERS()
        ]
    });
};
function main() {
    index_1.t.describe('i18n:', function () {
        index_1.t.describe('MultilingualService', function () {
            index_1.t.be(function () {
                testModuleConfig();
            });
            index_1.t.it('should at a minimum support english', function () {
                index_1.t.e(index_5.MultilingualService.SUPPORTED_LANGUAGES.length).toBe(1);
                index_1.t.e(index_5.MultilingualService.SUPPORTED_LANGUAGES[0].code).toBe('en');
            });
            index_1.t.it('changeLang - should not switch unless supported', index_1.t.inject([index_5.MultilingualService, store_1.Store], function (multilang, store) {
                store.dispatch(new index_5.ChangeAction('fr'));
                store.select('i18n').subscribe(function (i18n) {
                    index_1.t.e(i18n.lang).toBe('en');
                });
            }));
        });
        index_1.t.describe('MultilingualService for French browser/platform', function () {
            var SUPPORTED_LANGUAGES = [
                { code: 'en', title: 'English' },
                { code: 'fr', title: 'French' }
            ];
            index_1.t.be(function () {
                index_5.MultilingualService.SUPPORTED_LANGUAGES = SUPPORTED_LANGUAGES;
                testModuleConfig({ window: index_3.WindowMockFrench });
            });
            index_1.t.ae(function () { return index_4.TEST_MULTILINGUAL_RESET(); });
            index_1.t.it('should now support french by default', index_1.t.inject([index_5.MultilingualService, store_1.Store, index_2.WindowService], function (multilang, store, win) {
                index_1.t.e(index_5.MultilingualService.SUPPORTED_LANGUAGES.length).toBe(2);
                index_1.t.e(index_5.MultilingualService.SUPPORTED_LANGUAGES[0].code).toBe('en');
                index_1.t.e(index_5.MultilingualService.SUPPORTED_LANGUAGES[1].code).toBe('fr');
                index_1.t.e(win.navigator.language).toBe('fr-US');
                store.select('i18n').subscribe(function (i18n) {
                    index_1.t.e(i18n.lang).toBe('fr');
                });
            }));
        });
    });
}
exports.main = main;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlsaW5ndWFsLnNlcnZpY2Uuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm11bHRpbGluZ3VhbC5zZXJ2aWNlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGlEQUFnRDtBQUNoRCxtREFBOEQ7QUFHOUQscUNBQWlEO0FBQ2pELHlDQUE4QztBQUc5QywwQ0FBcUM7QUFDckMsc0RBQW9EO0FBQ3BELDBDQUF3RTtBQUN4RSxrREFBaUY7QUFHakYsMENBQXdGO0FBQ3hGLGtDQUErRztBQUcvRyxJQUFNLGdCQUFnQixHQUFHLFVBQUMsT0FBYTtJQUNyQyxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1FBQzdCLE9BQU8sRUFBRTtZQUNQLHdCQUFVLENBQUMsT0FBTyxDQUFDO2dCQUNqQixFQUFFLE9BQU8sRUFBRSxxQkFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7Z0JBQzVDLEVBQUUsT0FBTyxFQUFFLHNCQUFjLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTthQUMvQyxDQUFDO1lBQ0YsbUJBQVcsQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsZUFBTyxFQUFFLENBQUM7WUFDM0MsdUJBQWEsQ0FBQyxHQUFHLENBQUMsMkJBQW1CLENBQUM7WUFDdEMsNkJBQW1CO1NBQ3BCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsMkJBQW1CLENBQUMsT0FBTyxDQUFDO1lBQzVCLG1DQUEyQixFQUFFO1NBQzlCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUY7SUFDRSxTQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNsQixTQUFDLENBQUMsUUFBUSxDQUFDLHFCQUFxQixFQUFFO1lBRWhDLFNBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ0gsZ0JBQWdCLEVBQUUsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQztZQUVILFNBQUMsQ0FBQyxFQUFFLENBQUMscUNBQXFDLEVBQUU7Z0JBQzFDLFNBQUMsQ0FBQyxDQUFD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bmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBSb3V0ZXJUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyL3Rlc3RpbmcnO1xuXG4vLyBsaWJzXG5pbXBvcnQgeyBTdG9yZSwgU3RvcmVNb2R1bGUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBFZmZlY3RzTW9kdWxlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5cbi8vIGFwcFxuaW1wb3J0IHsgdCB9IGZyb20gJy4uLy4uL3Rlc3QvaW5kZXgnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSB9IGZyb20gJy4uLy4uL2NvcmUvY29yZS5tb2R1bGUnO1xuaW1wb3J0IHsgSUxhbmcsIFdpbmRvd1NlcnZpY2UsIENvbnNvbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29yZS9pbmRleCc7XG5pbXBvcnQgeyBURVNUX0NPUkVfUFJPVklERVJTLCBXaW5kb3dNb2NrRnJlbmNoIH0gZnJvbSAnLi4vLi4vY29yZS90ZXN0aW5nL2luZGV4JztcblxuLy8gbW9kdWxlXG5pbXBvcnQgeyBURVNUX01VTFRJTElOR1VBTF9QUk9WSURFUlMsIFRFU1RfTVVMVElMSU5HVUFMX1JFU0VUIH0gZnJvbSAnLi4vdGVzdGluZy9pbmRleCc7XG5pbXBvcnQgeyBJTXVsdGlsaW5ndWFsU3RhdGUsIE11bHRpbGluZ3VhbFNlcnZpY2UsIE11bHRpbGluZ3VhbEVmZmVjdHMsIHJlZHVjZXIsIENoYW5nZUFjdGlvbiB9IGZyb20gJy4uL2luZGV4JztcblxuLy8gdGVzdCBtb2R1bGUgY29uZmlndXJhdGlvbiBmb3IgZWFjaCB0ZXN0XG5jb25zdCB0ZXN0TW9kdWxlQ29uZmlnID0gKG9wdGlvbnM/OiBhbnkpID0+IHtcbiAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICBDb3JlTW9kdWxlLmZvclJvb3QoW1xuICAgICAgICB7IHByb3ZpZGU6IFdpbmRvd1NlcnZpY2UsIHVzZVZhbHVlOiB3aW5kb3cgfSxcbiAgICAgICAgeyBwcm92aWRlOiBDb25zb2xlU2VydmljZSwgdXNlVmFsdWU6IGNvbnNvbGUgfVxuICAgICAgXSksXG4gICAgICBTdG9yZU1vZHVsZS5wcm92aWRlU3RvcmUoeyBpMThuOiByZWR1Y2VyIH0pLFxuICAgICAgRWZmZWN0c01vZHVsZS5ydW4oTXVsdGlsaW5ndWFsRWZmZWN0cyksXG4gICAgICBSb3V0ZXJUZXN0aW5nTW9kdWxlXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgIFRFU1RfQ09SRV9QUk9WSURFUlMob3B0aW9ucyksXG4gICAgICBURVNUX01VTFRJTElOR1VBTF9QUk9WSURFUlMoKVxuICAgIF1cbiAgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbWFpbigpIHtcbiAgdC5kZXNjcmliZSgnaTE4bjonLCAoKSA9PiB7XG4gICAgdC5kZXNjcmliZSgnTXVsdGlsaW5ndWFsU2VydmljZScsICgpID0+IHtcblxuICAgICAgdC5iZSgoKSA9PiB7XG4gICAgICAgIHRlc3RNb2R1bGVDb25maWcoKTtcbiAgICAgIH0pO1xuXG4gICAgICB0Lml0KCdzaG91bGQgYXQgYSBtaW5pbXVtIHN1cHBvcnQgZW5nbGlzaCcsICgpID0+IHtcbiAgICAgICAgdC5lKE11bHRpbGluZ3VhbFNlcnZpY2UuU1VQUE9SVEVEX0xBTkdVQUdFUy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIHQuZShNdWx0aWxpbmd1YWxTZXJ2aWNlLlNVUFBPUlRFRF9MQU5HVUFHRVNbMF0uY29kZSkudG9CZSgnZW4nKTtcbiAgICAgIH0pO1xuXG4gICAgICB0Lml0KCdjaGFuZ2VMYW5nIC0gc2hvdWxkIG5vdCBzd2l0Y2ggdW5sZXNzIHN1cHBvcnRlZCcsIHQuaW5qZWN0KFtNdWx0aWxpbmd1YWxTZXJ2aWNlLCBTdG9yZV0sIChtdWx0aWxhbmc6IE11bHRpbGluZ3VhbFNlcnZpY2UsIHN0b3JlOiBTdG9yZTxhbnk+KSA9PiB7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKG5ldyBDaGFuZ2VBY3Rpb24oJ2ZyJykpO1xuICAgICAgICAvLyBvbmx5ICdlbicgc3VwcG9ydGVkIGJ5IGRlZmF1bHQgc28gY2hhbmdpbmcgdG8gJ2ZyJyBzaG91bGQgbm90IGNoYW5nZSBzdGF0ZVxuICAgICAgICBzdG9yZS5zZWxlY3QoJ2kxOG4nKS5zdWJzY3JpYmUoKGkxOG46IElNdWx0aWxpbmd1YWxTdGF0ZSkgPT4ge1xuICAgICAgICAgIHQuZShpMThuLmxhbmcpLnRvQmUoJ2VuJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSkpO1xuXG4gICAgfSk7XG5cbiAgICB0LmRlc2NyaWJlKCdNdWx0aWxpbmd1YWxTZXJ2aWNlIGZvciBGcmVuY2ggYnJvd3Nlci9wbGF0Zm9ybScsICgpID0+IHtcbiAgICAgIGNvbnN0IFNVUFBPUlRFRF9MQU5HVUFHRVM6IEFycmF5PElMYW5nPiA9IFtcbiAgICAgICAgeyBjb2RlOiAnZW4nLCB0aXRsZTogJ0VuZ2xpc2gnIH0sXG4gICAgICAgIHsgY29kZTogJ2ZyJywgdGl0bGU6ICdGcmVuY2gnIH1cbiAgICAgIF07XG5cbiAgICAgIHQuYmUoKCkgPT4ge1xuICAgICAgICBNdWx0aWxpbmd1YWxTZXJ2aWNlLlNVUFBPUlRFRF9MQU5HVUFHRVMgPSBTVVBQT1JURURfTEFOR1VBR0VTO1xuICAgICAgICB0ZXN0TW9kdWxlQ29uZmlnKHsgd2luZG93OiBXaW5kb3dNb2NrRnJlbmNoIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGVuc3VyZSBzdGF0aWNzIGFyZSByZXNldCB3aGVuIHRoZSB0ZXN0IGhhZCBtb2RpZmllZCBzdGF0aWNzIGluIGEgYmVmb3JlRWFjaCAoYmUpIG9yIGJlZm9yZUVhY2hQcm92aWRlciAoYmVwKVxuICAgICAgdC5hZSgoKSA9PiBURVNUX01VTFRJTElOR1VBTF9SRVNFVCgpKTtcblxuICAgICAgdC5pdCgnc2hvdWxkIG5vdyBzdXBwb3J0IGZyZW5jaCBieSBkZWZhdWx0JywgdC5pbmplY3QoW011bHRpbGluZ3VhbFNlcnZpY2UsIFN0b3JlLCBXaW5kb3dTZXJ2aWNlXSwgKG11bHRpbGFuZzogTXVsdGlsaW5ndWFsU2VydmljZSwgc3RvcmU6IFN0b3JlPGFueT4sIHdpbjogV2luZG93U2VydmljZSkgPT4ge1xuICAgICAgICB0LmUoTXVsdGlsaW5ndWFsU2VydmljZS5TVVBQT1JURURfTEFOR1VBR0VTLmxlbmd0aCkudG9CZSgyKTtcbiAgICAgICAgdC5lKE11bHRpbGluZ3VhbFNlcnZpY2UuU1VQUE9SVEVEX0xBTkdVQUdFU1swXS5jb2RlKS50b0JlKCdlbicpO1xuICAgICAgICB0LmUoTXVsdGlsaW5ndWFsU2VydmljZS5TVVBQT1JURURfTEFOR1VBR0VTWzFdLmNvZGUpLnRvQmUoJ2ZyJyk7XG4gICAgICAgIHQuZSh3aW4ubmF2aWdhdG9yLmxhbmd1YWdlKS50b0JlKCdmci1VUycpO1xuXG4gICAgICAgIHN0b3JlLnNlbGVjdCgnaTE4bicpLnN1YnNjcmliZSgoaTE4bjogSU11bHRpbGluZ3VhbFN0YXRlKSA9PiB7XG4gICAgICAgICAgdC5lKGkxOG4ubGFuZykudG9CZSgnZnInKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19