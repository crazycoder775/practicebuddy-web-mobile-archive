"use strict";
var frame_1 = require("ui/frame");
var app = require("application");
var platform_1 = require("platform");
var color_1 = require("color");
var ActionBarUtil = (function () {
    function ActionBarUtil() {
    }
    ActionBarUtil.SET_TITLE = function (title) {
        var actionBar = frame_1.topmost().currentPage.actionBar;
        actionBar.title = title;
    };
    ActionBarUtil.ADD_BUTTON = function (button) {
        frame_1.topmost().currentPage.actionBar.actionItems.addItem(button);
    };
    ActionBarUtil.HIDE_BACK_BUTTON = function () {
        if (frame_1.topmost().ios) {
            frame_1.topmost().ios.controller.visibleViewController.navigationItem.setHidesBackButtonAnimated(true, false);
        }
    };
    ActionBarUtil.EMPTY_ITEMS = function () {
        var actionBar = frame_1.topmost().currentPage.actionBar;
        var actionItems = actionBar.actionItems.getItems();
        actionItems.forEach(function (item) {
            actionBar.actionItems.removeItem(item);
        });
    };
    ActionBarUtil.STATUSBAR_STYLE = function (style) {
        if (frame_1.topmost().ios) {
            var navigationBar = frame_1.topmost().ios.controller.navigationBar;
            navigationBar.barStyle = style;
        }
        else if (platform_1.isAndroid) {
            if (app.android && platform_1.device.sdkVersion >= '21') {
                try {
                    var LayoutParams = android.view.WindowManager.LayoutParams;
                    var win = void 0;
                    if (app.android.foregroundActivity != null) {
                        win = app.android.foregroundActivity.getWindow();
                    }
                    else {
                        win = app.android.startActivity.getWindow();
                    }
                    win.addFlags(LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
                    win.setStatusBarColor(new color_1.Color('#3280CF').android);
                }
                catch (err) {
                    console.log(err);
                }
            }
        }
    };
    return ActionBarUtil;
}());
exports.ActionBarUtil = ActionBarUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uYmFyLnV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhY3Rpb25iYXIudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsa0NBQW1DO0FBRW5DLGlDQUFtQztBQUNuQyxxQ0FBNkM7QUFDN0MsK0JBQThCO0FBSzlCO0lBQUE7SUE4Q0EsQ0FBQztJQTdDZSx1QkFBUyxHQUF2QixVQUF3QixLQUFhO1FBQ25DLElBQUksU0FBUyxHQUFHLGVBQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFDaEQsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUNhLHdCQUFVLEdBQXhCLFVBQXlCLE1BQWtCO1FBRXpDLGVBQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBQ2EsOEJBQWdCLEdBQTlCO1FBQ0UsRUFBRSxDQUFDLENBQUMsZUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsQixlQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEcsQ0FBQztJQUNILENBQUM7SUFDYSx5QkFBVyxHQUF6QjtRQUNFLElBQUksU0FBUyxHQUFHLGVBQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFDaEQsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSTtZQUN2QixTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDYSw2QkFBZSxHQUE3QixVQUE4QixLQUFhO1FBQ3pDLEVBQUUsQ0FBQyxDQUFDLGVBQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBSSxhQUFhLEdBQUcsZUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7WUFHM0QsYUFBYSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakMsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxvQkFBUyxDQUFDLENBQUMsQ0FBQztZQUNyQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLGlCQUFNLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQztvQkFDSCxJQUFJLFlBQVksR0FBUSxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7b0JBQ2hFLElBQUksR0FBRyxTQUFLLENBQUM7b0JBQ2IsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUMzQyxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDbkQsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDTixHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQzlDLENBQUM7b0JBRUQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsaUNBQWlDLENBQUMsQ0FBQztvQkFDN0QsR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksYUFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0RCxDQUFDO2dCQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkIsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTlDRCxJQThDQztBQTlDWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvcG1vc3QgfSBmcm9tICd1aS9mcmFtZSc7XG5pbXBvcnQgeyBBY3Rpb25JdGVtLCBBY3Rpb25JdGVtcyB9IGZyb20gJ3VpL2FjdGlvbi1iYXInO1xuaW1wb3J0ICogYXMgYXBwIGZyb20gJ2FwcGxpY2F0aW9uJztcbmltcG9ydCB7IGRldmljZSwgaXNBbmRyb2lkIH0gZnJvbSAncGxhdGZvcm0nO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdjb2xvcic7XG5kZWNsYXJlIHZhciBhbmRyb2lkO1xuXG5kZWNsYXJlIHZhciBVSUJhclN0eWxlOiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25CYXJVdGlsIHtcbiAgcHVibGljIHN0YXRpYyBTRVRfVElUTEUodGl0bGU6IHN0cmluZykge1xuICAgIHZhciBhY3Rpb25CYXIgPSB0b3Btb3N0KCkuY3VycmVudFBhZ2UuYWN0aW9uQmFyO1xuICAgIGFjdGlvbkJhci50aXRsZSA9IHRpdGxlO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgQUREX0JVVFRPTihidXR0b246IEFjdGlvbkl0ZW0pIHtcbiAgICAvLyBOT1RFOiBUaGlzIE1VU1QgYmUgY2FsbGVkIEJFRk9SRSBTRVRfVElUTEUgb24gc3RhcnRcbiAgICB0b3Btb3N0KCkuY3VycmVudFBhZ2UuYWN0aW9uQmFyLmFjdGlvbkl0ZW1zLmFkZEl0ZW0oYnV0dG9uKTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIEhJREVfQkFDS19CVVRUT04oKSB7XG4gICAgaWYgKHRvcG1vc3QoKS5pb3MpIHtcbiAgICAgIHRvcG1vc3QoKS5pb3MuY29udHJvbGxlci52aXNpYmxlVmlld0NvbnRyb2xsZXIubmF2aWdhdGlvbkl0ZW0uc2V0SGlkZXNCYWNrQnV0dG9uQW5pbWF0ZWQodHJ1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgc3RhdGljIEVNUFRZX0lURU1TKCkge1xuICAgIHZhciBhY3Rpb25CYXIgPSB0b3Btb3N0KCkuY3VycmVudFBhZ2UuYWN0aW9uQmFyO1xuICAgIHZhciBhY3Rpb25JdGVtcyA9IGFjdGlvbkJhci5hY3Rpb25JdGVtcy5nZXRJdGVtcygpO1xuICAgIGFjdGlvbkl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGFjdGlvbkJhci5hY3Rpb25JdGVtcy5yZW1vdmVJdGVtKGl0ZW0pO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgU1RBVFVTQkFSX1NUWUxFKHN0eWxlOiBudW1iZXIpIHtcbiAgICBpZiAodG9wbW9zdCgpLmlvcykge1xuICAgICAgbGV0IG5hdmlnYXRpb25CYXIgPSB0b3Btb3N0KCkuaW9zLmNvbnRyb2xsZXIubmF2aWdhdGlvbkJhcjtcbiAgICAgIC8vIDA6IGRlZmF1bHRcbiAgICAgIC8vIDE6IGxpZ2h0XG4gICAgICBuYXZpZ2F0aW9uQmFyLmJhclN0eWxlID0gc3R5bGU7XG4gICAgfSBlbHNlIGlmIChpc0FuZHJvaWQpIHtcbiAgICAgIGlmIChhcHAuYW5kcm9pZCAmJiBkZXZpY2Uuc2RrVmVyc2lvbiA+PSAnMjEnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IExheW91dFBhcmFtcyA9IDxhbnk+YW5kcm9pZC52aWV3LldpbmRvd01hbmFnZXIuTGF5b3V0UGFyYW1zO1xuICAgICAgICAgIGxldCB3aW46IGFueTtcbiAgICAgICAgICBpZiAoYXBwLmFuZHJvaWQuZm9yZWdyb3VuZEFjdGl2aXR5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdpbiA9IGFwcC5hbmRyb2lkLmZvcmVncm91bmRBY3Rpdml0eS5nZXRXaW5kb3coKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luID0gYXBwLmFuZHJvaWQuc3RhcnRBY3Rpdml0eS5nZXRXaW5kb3coKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aW4uYWRkRmxhZ3MoTGF5b3V0UGFyYW1zLkZMQUdfRFJBV1NfU1lTVEVNX0JBUl9CQUNLR1JPVU5EUyk7XG4gICAgICAgICAgd2luLnNldFN0YXR1c0JhckNvbG9yKG5ldyBDb2xvcignIzMyODBDRicpLmFuZHJvaWQpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=