"use strict";
var Config = (function () {
    function Config() {
    }
    Config.isLoggedIn = function () {
        return !!Config.token;
    };
    Config.getToken = function () {
        return Config.token;
    };
    Config.hasActiveToken = function () {
        return !!Config.token;
    };
    Config.invalidateToken = function () {
        Config.token = "";
        Config.email = "";
    };
    Config.IS_WEB = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.WEB;
    };
    Config.IS_MOBILE_NATIVE = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_NATIVE;
    };
    Config.IS_MOBILE_HYBRID = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_HYBRID;
    };
    Config.IS_DESKTOP = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.DESKTOP;
    };
    Config.ENVIRONMENT = function () {
        if (Config.IS_MOBILE_NATIVE()) {
            return {
                API: 'your api endpoint',
                ENV: 'nativescript'
            };
        }
        else {
            return JSON.parse('<%= ENV_CONFIG %>');
        }
    };
    Config.IS_DEBUG_MODE = function () {
        for (var key in Config.DEBUG) {
            if (Config.DEBUG[key]) {
                return true;
            }
        }
        return false;
    };
    Config.RESET = function () {
        for (var key in Config.DEBUG) {
            Config.DEBUG[key] = false;
        }
    };
    return Config;
}());
Config.DEBUG = {
    LEVEL_1: false,
    LEVEL_2: false,
    LEVEL_3: false,
    LEVEL_4: false
};
Config.PLATFORMS = {
    WEB: 'web',
    MOBILE_NATIVE: 'mobile_native',
    MOBILE_HYBRID: 'mobile_hybrid',
    DESKTOP: 'desktop'
};
Config.PLATFORM_TARGET = Config.PLATFORMS.WEB;
exports.Config = Config;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFjQTtJQUFBO0lBc0ZBLENBQUM7SUFqRmlCLGlCQUFVLEdBQXhCO1FBQ0EsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFYSxlQUFRLEdBQXRCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVhLHFCQUFjLEdBQTVCO1FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFYSxzQkFBZSxHQUE3QjtRQUNFLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUF1QmEsYUFBTSxHQUFwQjtRQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ3pELENBQUM7SUFFYSx1QkFBZ0IsR0FBOUI7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztJQUNuRSxDQUFDO0lBRWEsdUJBQWdCLEdBQTlCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDbkUsQ0FBQztJQUVhLGlCQUFVLEdBQXhCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDN0QsQ0FBQztJQUVhLGtCQUFXLEdBQXpCO1FBQ0UsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQztnQkFDTCxHQUFHLEVBQUUsbUJBQW1CO2dCQUN4QixHQUFHLEVBQUUsY0FBYzthQUNwQixDQUFDO1FBQ0osQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6QyxDQUFDO0lBQ0gsQ0FBQztJQUVhLG9CQUFhLEdBQTNCO1FBQ0UsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXRCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDZCxDQUFDO1FBQ0gsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0lBR2EsWUFBSyxHQUFuQjtRQUNFLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBQ0gsYUFBQztBQUFELENBQUMsQUF0RkQ7QUF3QmdCLFlBQUssR0FBUTtJQUN6QixPQUFPLEVBQUUsS0FBSztJQUNkLE9BQU8sRUFBRSxLQUFLO0lBQ2QsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSztDQUNmLENBQUM7QUFHWSxnQkFBUyxHQUFlO0lBQ3BDLEdBQUcsRUFBRSxLQUFLO0lBQ1YsYUFBYSxFQUFFLGVBQWU7SUFDOUIsYUFBYSxFQUFFLGVBQWU7SUFDOUIsT0FBTyxFQUFFLFNBQVM7Q0FDbkIsQ0FBQztBQUdZLHNCQUFlLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7QUF4Q2xELHdCQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmVlbCBmcmVlIHRvIGV4dGVuZCB0aGlzIGludGVyZmFjZVxuLy8gZGVwZW5kaW5nIG9uIHlvdXIgYXBwIHNwZWNpZmljIGNvbmZpZy5cbmV4cG9ydCBpbnRlcmZhY2UgRW52Q29uZmlnIHtcbiAgQVBJPzogc3RyaW5nO1xuICBFTlY/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBJUGxhdGZvcm1zIHtcbiAgV0VCOiBzdHJpbmc7XG4gIE1PQklMRV9OQVRJVkU6IHN0cmluZztcbiAgTU9CSUxFX0hZQlJJRDogc3RyaW5nO1xuICBERVNLVE9QOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuICAgIFxuIHB1YmxpYyBzdGF0aWMgdG9rZW46c3RyaW5nO1xuIHB1YmxpYyBzdGF0aWMgZW1haWw6c3RyaW5nO1xuICAgIFxuICAgIHB1YmxpYyBzdGF0aWMgaXNMb2dnZWRJbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISFDb25maWcudG9rZW47XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFRva2VuKCk6YW55IHtcbiAgICByZXR1cm4gQ29uZmlnLnRva2VuO1xuICB9XG4gICAgXG4gIHB1YmxpYyBzdGF0aWMgaGFzQWN0aXZlVG9rZW4oKTphbnkge1xuICAgIHJldHVybiAhIUNvbmZpZy50b2tlbjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaW52YWxpZGF0ZVRva2VuKCkge1xuICAgIENvbmZpZy50b2tlbiA9IFwiXCI7XG4gICAgQ29uZmlnLmVtYWlsID0gXCJcIjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgUGFnZUNsYXNzOiBhbnk7XG5cbiAgcHVibGljIHN0YXRpYyBERUJVRzogYW55ID0ge1xuICAgIExFVkVMXzE6IGZhbHNlLCAvLyAuaW5mbyBvbmx5XG4gICAgTEVWRUxfMjogZmFsc2UsIC8vIC53YXJuIG9ubHlcbiAgICBMRVZFTF8zOiBmYWxzZSwgLy8gLmVycm9yIG9ubHlcbiAgICBMRVZFTF80OiBmYWxzZSAgLy8gLmxvZyArIGFsbCB0aGUgYWJvdmVcbiAgfTtcblxuICAvLyBzdXBwb3J0ZWQgcGxhdGZvcm1zXG4gIHB1YmxpYyBzdGF0aWMgUExBVEZPUk1TOiBJUGxhdGZvcm1zID0ge1xuICAgIFdFQjogJ3dlYicsXG4gICAgTU9CSUxFX05BVElWRTogJ21vYmlsZV9uYXRpdmUnLFxuICAgIE1PQklMRV9IWUJSSUQ6ICdtb2JpbGVfaHlicmlkJyxcbiAgICBERVNLVE9QOiAnZGVza3RvcCdcbiAgfTtcblxuICAvLyBjdXJyZW50IHRhcmdldCAoZGVmYXVsdHMgdG8gd2ViKVxuICBwdWJsaWMgc3RhdGljIFBMQVRGT1JNX1RBUkdFVDogc3RyaW5nID0gQ29uZmlnLlBMQVRGT1JNUy5XRUI7XG5cbiAgLy8gY29udmVuaWVudCBwbGF0Zm9ybSBjaGVja3NcbiAgcHVibGljIHN0YXRpYyBJU19XRUIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuV0VCO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBJU19NT0JJTEVfTkFUSVZFKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBDb25maWcuUExBVEZPUk1fVEFSR0VUID09PSBDb25maWcuUExBVEZPUk1TLk1PQklMRV9OQVRJVkU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIElTX01PQklMRV9IWUJSSUQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuTU9CSUxFX0hZQlJJRDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgSVNfREVTS1RPUCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQ29uZmlnLlBMQVRGT1JNX1RBUkdFVCA9PT0gQ29uZmlnLlBMQVRGT1JNUy5ERVNLVE9QO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBFTlZJUk9OTUVOVCgpOiBFbnZDb25maWcge1xuICAgIGlmIChDb25maWcuSVNfTU9CSUxFX05BVElWRSgpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBBUEk6ICd5b3VyIGFwaSBlbmRwb2ludCcsXG4gICAgICAgIEVOVjogJ25hdGl2ZXNjcmlwdCdcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKCc8JT0gRU5WX0NPTkZJRyAlPicpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgSVNfREVCVUdfTU9ERSgpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gQ29uZmlnLkRFQlVHKSB7XG4gICAgICBpZiAoQ29uZmlnLkRFQlVHW2tleV0pIHtcbiAgICAgICAgLy8gaWYgYW55IGxldmVsIGlzIG9uLCBkZWJ1ZyBtb2RlIGlzIG9uXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyByZXNldCBkZWJ1ZyBkZWZhdWx0c1xuICBwdWJsaWMgc3RhdGljIFJFU0VUKCkge1xuICAgIGZvciAobGV0IGtleSBpbiBDb25maWcuREVCVUcpIHtcbiAgICAgIENvbmZpZy5ERUJVR1trZXldID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=