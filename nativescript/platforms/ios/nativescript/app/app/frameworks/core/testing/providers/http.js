"use strict";
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var testing_1 = require("@angular/http/testing");
var providers = [
    http_1.BaseRequestOptions,
    testing_1.MockBackend,
    { provide: http_1.Http,
        useFactory: function (backend, defaultOptions) {
            return new http_1.Http(backend, defaultOptions);
        },
        deps: [testing_1.MockBackend, http_1.BaseRequestOptions]
    }
];
function GET_HTTP_PROVIDERS_INJECTOR(additionalProviders) {
    if (additionalProviders) {
        providers = providers.concat(additionalProviders);
    }
    return core_1.ReflectiveInjector.resolveAndCreate(providers);
}
exports.GET_HTTP_PROVIDERS_INJECTOR = GET_HTTP_PROVIDERS_INJECTOR;
function TEST_HTTP_PROVIDERS() {
    return providers;
}
exports.TEST_HTTP_PROVIDERS = TEST_HTTP_PROVIDERS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImh0dHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHNDQUFtRDtBQUNuRCxzQ0FBNEU7QUFDNUUsaURBQW9EO0FBRXBELElBQUksU0FBUyxHQUFlO0lBQzFCLHlCQUFrQjtJQUNsQixxQkFBVztJQUNYLEVBQUUsT0FBTyxFQUFFLFdBQUk7UUFDYixVQUFVLEVBQUUsVUFBVSxPQUEwQixFQUFFLGNBQWtDO1lBQ2xGLE1BQU0sQ0FBQyxJQUFJLFdBQUksQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUNELElBQUksRUFBRSxDQUFDLHFCQUFXLEVBQUUseUJBQWtCLENBQUM7S0FDeEM7Q0FDRixDQUFDO0FBTUYscUNBQTRDLG1CQUFnQztJQUUxRSxFQUFFLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDeEIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsTUFBTSxDQUFDLHlCQUFrQixDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFQRCxrRUFPQztBQU1EO0lBQ0UsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBRkQsa0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhbmd1bGFyXG5pbXBvcnQgeyBSZWZsZWN0aXZlSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VSZXF1ZXN0T3B0aW9ucywgQ29ubmVjdGlvbkJhY2tlbmQsIEh0dHAgfSBmcm9tICdAYW5ndWxhci9odHRwJztcbmltcG9ydCB7IE1vY2tCYWNrZW5kIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cC90ZXN0aW5nJztcblxubGV0IHByb3ZpZGVyczogQXJyYXk8YW55PiA9IFtcbiAgQmFzZVJlcXVlc3RPcHRpb25zLFxuICBNb2NrQmFja2VuZCxcbiAgeyBwcm92aWRlOiBIdHRwLFxuICAgIHVzZUZhY3Rvcnk6IGZ1bmN0aW9uIChiYWNrZW5kOiBDb25uZWN0aW9uQmFja2VuZCwgZGVmYXVsdE9wdGlvbnM6IEJhc2VSZXF1ZXN0T3B0aW9ucykge1xuICAgICAgcmV0dXJuIG5ldyBIdHRwKGJhY2tlbmQsIGRlZmF1bHRPcHRpb25zKTtcbiAgICB9LFxuICAgIGRlcHM6IFtNb2NrQmFja2VuZCwgQmFzZVJlcXVlc3RPcHRpb25zXVxuICB9XG5dO1xuXG4vKlxuKiBGb3IgaW5zdGFuY2VzIHdoZXJlIHlvdSBuZWVkIHRoZSBpbmplY3RvclxuKiBAcmV0dXJucyBgUmVmbGVjdGl2ZUluamVjdG9yYFxuKi9cbmV4cG9ydCBmdW5jdGlvbiBHRVRfSFRUUF9QUk9WSURFUlNfSU5KRUNUT1IoYWRkaXRpb25hbFByb3ZpZGVycz86IEFycmF5PGFueT4pOiBSZWZsZWN0aXZlSW5qZWN0b3Ige1xuXG4gIGlmIChhZGRpdGlvbmFsUHJvdmlkZXJzKSB7XG4gICAgcHJvdmlkZXJzID0gcHJvdmlkZXJzLmNvbmNhdChhZGRpdGlvbmFsUHJvdmlkZXJzKTtcbiAgfVxuXG4gIHJldHVybiBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShwcm92aWRlcnMpO1xufVxuXG4vKlxuKiBGb3IgdGVzdGluZyBodHRwIHNlcnZpY2VzXG4qIEByZXR1cm5zIGBBcnJheTxhbnk+YFxuKi9cbmV4cG9ydCBmdW5jdGlvbiBURVNUX0hUVFBfUFJPVklERVJTKCk6IEFycmF5PGFueT4ge1xuICByZXR1cm4gcHJvdmlkZXJzO1xufVxuXG5cblxuIl19