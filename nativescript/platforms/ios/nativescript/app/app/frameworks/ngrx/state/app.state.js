"use strict";
require("@ngrx/core/add/operator/select");
var compose_1 = require("@ngrx/core/compose");
var ngrx_store_freeze_1 = require("ngrx-store-freeze");
var store_1 = require("@ngrx/store");
var fromMultilingual = require("../../i18n/index");
var fromSample = require("../../sample/index");
;
var reducers = {
    i18n: fromMultilingual.reducer,
    sample: fromSample.reducer
};
var developmentReducer = compose_1.compose(ngrx_store_freeze_1.storeFreeze, store_1.combineReducers)(reducers);
var productionReducer = store_1.combineReducers(reducers);
function AppReducer(state, action) {
    if (String('<%= BUILD_TYPE %>') === 'dev') {
        return developmentReducer(state, action);
    }
    else {
        return productionReducer(state, action);
    }
}
exports.AppReducer = AppReducer;
function getMultilingualState(state$) {
    return state$.select(function (s) { return s.i18n; });
}
exports.getMultilingualState = getMultilingualState;
function getNameListState(state$) {
    return state$.select(function (s) { return s.sample; });
}
exports.getNameListState = getNameListState;
exports.getLang = compose_1.compose(fromMultilingual.getLang, getMultilingualState);
exports.getNames = compose_1.compose(fromSample.getNames, getNameListState);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLnN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSwwQ0FBd0M7QUFVeEMsOENBQTZDO0FBTzdDLHVEQUFnRDtBQVVoRCxxQ0FBOEM7QUFROUMsbURBQXFEO0FBQ3JELCtDQUFpRDtBQVNoRCxDQUFDO0FBU0YsSUFBTSxRQUFRLEdBQUc7SUFDZixJQUFJLEVBQUUsZ0JBQWdCLENBQUMsT0FBTztJQUM5QixNQUFNLEVBQUUsVUFBVSxDQUFDLE9BQU87Q0FDM0IsQ0FBQztBQUVGLElBQU0sa0JBQWtCLEdBQTZCLGlCQUFPLENBQUMsK0JBQVcsRUFBRSx1QkFBZSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDckcsSUFBTSxpQkFBaUIsR0FBNkIsdUJBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUU5RSxvQkFBMkIsS0FBVSxFQUFFLE1BQVc7SUFDaEQsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUMsQ0FBQztBQUNILENBQUM7QUFORCxnQ0FNQztBQUVELDhCQUFxQyxNQUE2QjtJQUNoRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUZELG9EQUVDO0FBQ0QsMEJBQWlDLE1BQTZCO0lBQzVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sRUFBUixDQUFRLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRkQsNENBRUM7QUFFWSxRQUFBLE9BQU8sR0FBUSxpQkFBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3ZFLFFBQUEsUUFBUSxHQUFRLGlCQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGlic1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG4vLyBpbXBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QnO1xuaW1wb3J0IHsgQWN0aW9uUmVkdWNlciB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCAnQG5ncngvY29yZS9hZGQvb3BlcmF0b3Ivc2VsZWN0JztcblxuLyoqXG4gKiBUaGUgY29tcG9zZSBmdW5jdGlvbiBpcyBvbmUgb2Ygb3VyIG1vc3QgaGFuZHkgdG9vbHMuIEluIGJhc2ljIHRlcm1zLCB5b3UgZ2l2ZVxuICogaXQgYW55IG51bWJlciBvZiBmdW5jdGlvbnMgYW5kIGl0IHJldHVybnMgYSBmdW5jdGlvbi4gVGhpcyBuZXcgZnVuY3Rpb25cbiAqIHRha2VzIGEgdmFsdWUgYW5kIGNoYWlucyBpdCB0aHJvdWdoIGV2ZXJ5IGNvbXBvc2VkIGZ1bmN0aW9uLCByZXR1cm5pbmdcbiAqIHRoZSBvdXRwdXQuXG4gKlxuICogTW9yZTogaHR0cHM6Ly9kcmJvb2xlYW4uZ2l0Ym9va3MuaW8vbW9zdGx5LWFkZXF1YXRlLWd1aWRlL2NvbnRlbnQvY2g1Lmh0bWxcbiAqL1xuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ0BuZ3J4L2NvcmUvY29tcG9zZSc7XG5cbi8qKlxuICogc3RvcmVGcmVlemUgcHJldmVudHMgc3RhdGUgZnJvbSBiZWluZyBtdXRhdGVkLiBXaGVuIG11dGF0aW9uIG9jY3VycywgYW5cbiAqIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi4gVGhpcyBpcyB1c2VmdWwgZHVyaW5nIGRldmVsb3BtZW50IG1vZGUgdG9cbiAqIGVuc3VyZSB0aGF0IG5vbmUgb2YgdGhlIHJlZHVjZXJzIGFjY2lkZW50YWxseSBtdXRhdGVzIHRoZSBzdGF0ZS5cbiAqL1xuaW1wb3J0IHsgc3RvcmVGcmVlemUgfSBmcm9tICduZ3J4LXN0b3JlLWZyZWV6ZSc7XG5cbi8qKlxuICogY29tYmluZVJlZHVjZXJzIGlzIGFub3RoZXIgdXNlZnVsIG1ldGFyZWR1Y2VyIHRoYXQgdGFrZXMgYSBtYXAgb2YgcmVkdWNlclxuICogZnVuY3Rpb25zIGFuZCBjcmVhdGVzIGEgbmV3IHJlZHVjZXIgdGhhdCBzdG9yZXMgdGhlIGdhdGhlcnMgdGhlIHZhbHVlc1xuICogb2YgZWFjaCByZWR1Y2VyIGFuZCBzdG9yZXMgdGhlbSB1c2luZyB0aGUgcmVkdWNlcidzIGtleS4gVGhpbmsgb2YgaXRcbiAqIGFsbW9zdCBsaWtlIGEgZGF0YWJhc2UsIHdoZXJlIGV2ZXJ5IHJlZHVjZXIgaXMgYSB0YWJsZSBpbiB0aGUgZGIuXG4gKlxuICogTW9yZTogaHR0cHM6Ly9lZ2doZWFkLmlvL2xlc3NvbnMvamF2YXNjcmlwdC1yZWR1eC1pbXBsZW1lbnRpbmctY29tYmluZXJlZHVjZXJzLWZyb20tc2NyYXRjaFxuICovXG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5cbi8qKlxuICogRXZlcnkgcmVkdWNlciBtb2R1bGUncyBkZWZhdWx0IGV4cG9ydCBpcyB0aGUgcmVkdWNlciBmdW5jdGlvbiBpdHNlbGYuIEluXG4gKiBhZGRpdGlvbiwgZWFjaCBtb2R1bGUgc2hvdWxkIGV4cG9ydCBhIHR5cGUgb3IgaW50ZXJmYWNlIHRoYXQgZGVzY3JpYmVzXG4gKiB0aGUgc3RhdGUgb2YgdGhlIHJlZHVjZXIgcGx1cyBhbnkgc2VsZWN0b3IgZnVuY3Rpb25zLiBUaGUgYCogYXNgXG4gKiBub3RhdGlvbiBwYWNrYWdlcyB1cCBhbGwgb2YgdGhlIGV4cG9ydHMgaW50byBhIHNpbmdsZSBvYmplY3QuXG4gKi9cbmltcG9ydCAqIGFzIGZyb21NdWx0aWxpbmd1YWwgZnJvbSAnLi4vLi4vaTE4bi9pbmRleCc7XG5pbXBvcnQgKiBhcyBmcm9tU2FtcGxlIGZyb20gJy4uLy4uL3NhbXBsZS9pbmRleCc7XG5cbi8qKlxuICogQXMgbWVudGlvbmVkLCB3ZSB0cmVhdCBlYWNoIHJlZHVjZXIgbGlrZSBhIHRhYmxlIGluIGEgZGF0YWJhc2UuIFRoaXMgbWVhbnNcbiAqIG91ciB0b3AgbGV2ZWwgc3RhdGUgaW50ZXJmYWNlIGlzIGp1c3QgYSBtYXAgb2Yga2V5cyB0byBpbm5lciBzdGF0ZSB0eXBlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQXBwU3RhdGUge1xuICBpMThuOiBmcm9tTXVsdGlsaW5ndWFsLklNdWx0aWxpbmd1YWxTdGF0ZTtcbiAgc2FtcGxlOiBmcm9tU2FtcGxlLklTYW1wbGVTdGF0ZTtcbn07XG5cbi8qKlxuICogQmVjYXVzZSBtZXRhcmVkdWNlcnMgdGFrZSBhIHJlZHVjZXIgZnVuY3Rpb24gYW5kIHJldHVybiBhIG5ldyByZWR1Y2VyLFxuICogd2UgY2FuIHVzZSBvdXIgY29tcG9zZSBoZWxwZXIgdG8gY2hhaW4gdGhlbSB0b2dldGhlci4gSGVyZSB3ZSBhcmVcbiAqIHVzaW5nIGNvbWJpbmVSZWR1Y2VycyB0byBtYWtlIG91ciB0b3AgbGV2ZWwgcmVkdWNlciwgYW5kIHRoZW5cbiAqIHdyYXBwaW5nIHRoYXQgaW4gc3RvcmVMb2dnZXIuIFJlbWVtYmVyIHRoYXQgY29tcG9zZSBhcHBsaWVzXG4gKiB0aGUgcmVzdWx0IGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqL1xuY29uc3QgcmVkdWNlcnMgPSB7XG4gIGkxOG46IGZyb21NdWx0aWxpbmd1YWwucmVkdWNlcixcbiAgc2FtcGxlOiBmcm9tU2FtcGxlLnJlZHVjZXJcbn07XG5cbmNvbnN0IGRldmVsb3BtZW50UmVkdWNlcjogQWN0aW9uUmVkdWNlcjxJQXBwU3RhdGU+ID0gY29tcG9zZShzdG9yZUZyZWV6ZSwgY29tYmluZVJlZHVjZXJzKShyZWR1Y2Vycyk7XG5jb25zdCBwcm9kdWN0aW9uUmVkdWNlcjogQWN0aW9uUmVkdWNlcjxJQXBwU3RhdGU+ID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKTtcblxuZXhwb3J0IGZ1bmN0aW9uIEFwcFJlZHVjZXIoc3RhdGU6IGFueSwgYWN0aW9uOiBhbnkpIHtcbiAgaWYgKFN0cmluZygnPCU9IEJVSUxEX1RZUEUgJT4nKSA9PT0gJ2RldicpIHtcbiAgICByZXR1cm4gZGV2ZWxvcG1lbnRSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcm9kdWN0aW9uUmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXVsdGlsaW5ndWFsU3RhdGUoc3RhdGUkOiBPYnNlcnZhYmxlPElBcHBTdGF0ZT4pIHtcbiAgcmV0dXJuIHN0YXRlJC5zZWxlY3QocyA9PiBzLmkxOG4pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVMaXN0U3RhdGUoc3RhdGUkOiBPYnNlcnZhYmxlPElBcHBTdGF0ZT4pIHtcbiAgcmV0dXJuIHN0YXRlJC5zZWxlY3QocyA9PiBzLnNhbXBsZSk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRMYW5nOiBhbnkgPSBjb21wb3NlKGZyb21NdWx0aWxpbmd1YWwuZ2V0TGFuZywgZ2V0TXVsdGlsaW5ndWFsU3RhdGUpO1xuZXhwb3J0IGNvbnN0IGdldE5hbWVzOiBhbnkgPSBjb21wb3NlKGZyb21TYW1wbGUuZ2V0TmFtZXMsIGdldE5hbWVMaXN0U3RhdGUpO1xuIl19